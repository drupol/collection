<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.22.1@e9dad66e11274315dac27e08349c628c7d6a1a43">
  <file src="src/Collection.php">
    <InvalidArgument>
      <code><![CDATA[$callback]]></code>
      <code><![CDATA[$callbacks]]></code>
      <code><![CDATA[$parameters]]></code>
      <code><![CDATA[static function () use (&$counter): void {
                    ++$counter;
                }]]></code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code><![CDATA[(new self((new Operation\Partition())()(...$callbacks), [$this]))
            ->map(
                /**
                 * @param iterable<TKey, T> $iterable
                 *
                 * @return Collection<TKey, T>
                 */
                static fn (iterable $iterable): Collection => Collection::fromIterable($iterable)
            )]]></code>
      <code><![CDATA[(new self((new Operation\Span())()(...$callbacks), [$this]))
            ->map(
                /**
                 * @param iterable<TKey, T> $iterable
                 *
                 * @return Collection<TKey, T>
                 */
                static fn (iterable $iterable): Collection => Collection::fromIterable($iterable)
            )]]></code>
      <code><![CDATA[new self((new Operation\Unfold())()($parameters)($callback))]]></code>
      <code><![CDATA[new self((new Operation\Wrap())(), [$this])]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[CollectionInterface]]></code>
      <code><![CDATA[CollectionInterface]]></code>
      <code><![CDATA[CollectionInterface]]></code>
      <code><![CDATA[CollectionInterface]]></code>
    </InvalidReturnType>
    <MixedArgument>
      <code><![CDATA[(new Operation\Combinate())()($length)]]></code>
      <code><![CDATA[(new Operation\Product())()(...$iterables)]]></code>
    </MixedArgument>
  </file>
  <file src="src/Operation/DropWhile.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Entropy.php">
    <InvalidArgument>
      <code><![CDATA[static fn (float $acc, float $p, int $_, Collection $c): float => 0 === $key ? $acc : $acc - $p * log($p, 2) / ((1 === $count = $c->count()) ? 1 : log($count, 2))]]></code>
      <code><![CDATA[static fn (mixed $_, int $key, Collection $collection): float => $collection
                    ->limit($key + 1)
                    ->frequency()
                    ->map(
                        /**
                         * @param T $_
                         */
                        static fn (mixed $_, int $freq): float => $freq / ($key + 1)
                    )
                    ->reduce(
                        static fn (float $acc, float $p, int $_, Collection $c): float => 0 === $key ? $acc : $acc - $p * log($p, 2) / ((1 === $count = $c->count()) ? 1 : log($count, 2)),
                        0
                    )]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Every.php">
    <InvalidArgument>
      <code><![CDATA[$predicates]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Filter.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/MatchOne.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
      <code><![CDATA[$matchers]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Product.php">
    <InvalidArgument>
      <code><![CDATA[[[]]]]></code>
      <code><![CDATA[static fn (iterable $a, iterable $x): Generator => $f($x)($a)]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Reject.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Since.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Split.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/TakeWhile.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Until.php">
    <InvalidArgument>
      <code><![CDATA[$callbacks]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Zip.php">
    <MoreSpecificReturnType>
      <code><![CDATA[Generator<list<TKey|UKey|null>, list<T|U|null>>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="tests/static-analysis/fromCallable.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$invokableClassList]]></code>
      <code><![CDATA[$invokableClassMap]]></code>
      <code><![CDATA[$invokableClassMixed]]></code>
      <code><![CDATA[[$classWithMethod, 'getKeyValues']]]></code>
      <code><![CDATA[[$classWithMethod, 'getMixed']]]></code>
      <code><![CDATA[[$classWithMethod, 'getValues']]]></code>
      <code><![CDATA[[$classWithStaticMethod, 'getKeyValues']]]></code>
      <code><![CDATA[[$classWithStaticMethod, 'getMixed']]]></code>
      <code><![CDATA[[$classWithStaticMethod, 'getValues']]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="tests/static-analysis/partition.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$left]]></code>
      <code><![CDATA[$left]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="tests/static-analysis/scanLeft1.php">
    <InvalidArgument>
      <code><![CDATA[Collection::fromIterable(array_combine(range('a', 'e'), range('a', 'e')))->scanLeft1(static fn (int|string $carry, string $value): int => ord($value))]]></code>
    </InvalidArgument>
  </file>
  <file src="tests/static-analysis/scanRight1.php">
    <InvalidArgument>
      <code><![CDATA[Collection::fromIterable(array_combine(range('a', 'e'), range('a', 'e')))->scanRight1(static fn (int|string $carry, string $value): int => ord($value))]]></code>
    </InvalidArgument>
  </file>
  <file src="tests/static-analysis/span.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$left]]></code>
      <code><![CDATA[$left]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
</files>
