<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.16.0@2897ba636551a8cb61601cc26f6ccfbba6c36591">
  <file src="src/Collection.php">
  <MixedArgument>
      <code>(new Operation\Product())()(...$iterables)</code>
      <code>(new Operation\Combinate())()($length)</code>
  </MixedArgument>
    <InvalidArgument>
      <code>$callback</code>
      <code>$callbacks</code>
      <code>$parameters</code>
      <code><![CDATA[static function () use (&$counter): void {
                    ++$counter;
                }]]></code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code><![CDATA[(new self((new Operation\Partition())()(...$callbacks), [$this]))
            ->map(
                /**
                 * @param iterable<TKey, T> $iterable
                 *
                 * @return Collection<TKey, T>
                 */
                static fn (iterable $iterable): Collection => Collection::fromIterable($iterable)
            )]]></code>
      <code><![CDATA[(new self((new Operation\Span())()(...$callbacks), [$this]))
            ->map(
                /**
                 * @param iterable<TKey, T> $iterable
                 *
                 * @return Collection<TKey, T>
                 */
                static fn (iterable $iterable): Collection => Collection::fromIterable($iterable)
            )]]></code>
      <code>new self((new Operation\Unfold())()($parameters)($callback))</code>
      <code>new self((new Operation\Wrap())(), [$this])</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>CollectionInterface</code>
      <code>CollectionInterface</code>
      <code>CollectionInterface</code>
      <code>CollectionInterface</code>
    </InvalidReturnType>
    <PossiblyNullArgument>
      <code>$default</code>
      <code>$default</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Operation/All.php">
    <InvalidReturnStatement>
      <code><![CDATA[static fn (bool $normalize): Closure =>
                /**
                 * @param iterable<TKey, T> $iterable
                 *
                 * @return Generator<int, T>|Generator<TKey, T>
                 */
                static fn (iterable $iterable): Generator => yield from ($normalize ? (new Normalize())()($iterable) : $iterable)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[Closure(bool): Closure(iterable<TKey, T>): (Generator<int, T>|Generator<TKey, T>)]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Operation/DropWhile.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Dispersion.php">
    <InvalidReturnStatement>
      <code>[(0 === $key) ? 0 : (($c * ($key - 1) + (($v === $value) ? 0 : 1)) / $key), $value]</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[array<float|int<0,1>, T>]]></code>
    </InvalidReturnType>
    <MismatchingDocblockParamType>
      <code><![CDATA[array<float|int<0,1>, T>]]></code>
      <code><![CDATA[array<float|int<0,1>, T|null>]]></code>
    </MismatchingDocblockParamType>
  </file>
  <file src="src/Operation/Entropy.php">
    <InvalidArgument>
      <code><![CDATA[static fn (float $acc, float $p, int $_, Collection $c): float => 0 === $key ? $acc : $acc - $p * log($p, 2) / ((1 === $count = $c->count()) ? 1 : log($count, 2))]]></code>
      <code><![CDATA[static fn (mixed $_, int $key, Collection $collection): float => $collection
                    ->limit($key + 1)
                    ->frequency()
                    ->map(
                        /**
                         * @param T $_
                         */
                        static fn (mixed $_, int $freq): float => $freq / ($key + 1)
                    )
                    ->reduce(
                        static fn (float $acc, float $p, int $_, Collection $c): float => 0 === $key ? $acc : $acc - $p * log($p, 2) / ((1 === $count = $c->count()) ? 1 : log($count, 2)),
                        0
                    )]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Every.php">
    <InvalidArgument>
      <code>$predicates</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Filter.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/MatchOne.php">
    <InvalidArgument>
      <code>$callbacks</code>
      <code>$matchers</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Product.php">
    <InvalidArgument>
      <code>[[]]</code>
      <code><![CDATA[static fn (iterable $a, iterable $x): Generator => $f($x)($a)]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Reject.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Since.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Split.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/TakeWhile.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Until.php">
    <InvalidArgument>
      <code>$callbacks</code>
    </InvalidArgument>
  </file>
  <file src="src/Operation/Zip.php">
    <MoreSpecificReturnType>
      <code><![CDATA[Generator<list<TKey|UKey|null>, list<T|U|null>>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="tests/static-analysis/fromCallable.php">
    <PossiblyInvalidArgument>
      <code>$invokableClassList</code>
      <code>$invokableClassMap</code>
      <code>$invokableClassMixed</code>
      <code><![CDATA[[$classWithMethod, 'getKeyValues']]]></code>
      <code><![CDATA[[$classWithMethod, 'getMixed']]]></code>
      <code><![CDATA[[$classWithMethod, 'getValues']]]></code>
      <code><![CDATA[[$classWithStaticMethod, 'getKeyValues']]]></code>
      <code><![CDATA[[$classWithStaticMethod, 'getMixed']]]></code>
      <code><![CDATA[[$classWithStaticMethod, 'getValues']]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="tests/static-analysis/partition.php">
    <PossiblyUndefinedArrayOffset>
      <code>$left</code>
      <code>$left</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="tests/static-analysis/span.php">
    <PossiblyUndefinedArrayOffset>
      <code>$left</code>
      <code>$left</code>
    </PossiblyUndefinedArrayOffset>
  </file>
</files>
